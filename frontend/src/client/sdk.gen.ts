// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from "./core/CancelablePromise"
import { OpenAPI } from "./core/OpenAPI"
import { request as __request } from "./core/request"
import type {
  ItemsReadItemsData,
  ItemsReadItemsResponse,
  ItemsCreateItemData,
  ItemsCreateItemResponse,
  ItemsReadItemData,
  ItemsReadItemResponse,
  ItemsUpdateItemData,
  ItemsUpdateItemResponse,
  ItemsDeleteItemData,
  ItemsDeleteItemResponse,
} from "./types.gen"

export class ItemsService {

  private static staticItems = [
    {
      title: "Item 1",
      description: "Description for Item 1",
      id: "11111111-1111-1111-1111-111111111111",
      owner_id: "aaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaa",
    },
    {
      title: "Item 2",
      description: "Description for Item 2",
      id: "22222222-2222-2222-2222-222222222222",
      owner_id: "bbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbb",
    },
    {
      title: "Item 3",
      description: "Description for Item 3",
      id: "33333333-3333-3333-3333-333333333333",
      owner_id: "ccccccc-cccc-cccc-cccc-ccccccccccc",
    },
    {
      title: "Item 4",
      description: "Description for Item 4",
      id: "44444444-4444-4444-4444-444444444444",
      owner_id: "ddddddd-dddd-dddd-dddd-ddddddddddd",
    },
    {
      title: "Item 5",
      description: "Description for Item 5",
      id: "55555555-5555-5555-5555-555555555555",
      owner_id: "eeeeeee-eeee-eeee-eeee-eeeeeeeeeee",
    },
    {
      title: "Item 6",
      description: "Description for Item 6",
      id: "66666666-6666-6666-6666-666666666666",
      owner_id: "fffffff-ffff-ffff-ffff-fffffffffff",
    },
  ]

  /**
   * Read Items
   * Retrieve items.
   * @param data The data for the request.
   * @param data.skip
   * @param data.limit
   * @returns ItemsPublic Successful Response
   * @throws ApiError
   */
  public static readItems(
    data: ItemsReadItemsData = {},
  ): CancelablePromise<ItemsReadItemsResponse> {
    const { skip = 0, limit = 5 } = data

    // paging process
    const paginatedItems = ItemsService.staticItems.slice(skip, skip + limit)

    return new Promise((resolve) => {
      setTimeout(() => {
        resolve({
          data: paginatedItems,
          count: ItemsService.staticItems.length,
        })
      }, 500)
    }) as CancelablePromise<ItemsReadItemsResponse>
  }

  /**
   * Create Item
   * Create new item.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns ItemPublic Successful Response
   * @throws ApiError
   */
  public static createItem(
    data: ItemsCreateItemData,
  ): CancelablePromise<ItemsCreateItemResponse> {
    const newItem = {
      id: crypto.randomUUID(), // generate random id
      owner_id: "d9d7fca5-cf19-42c3-a9d5-42cfa3510598",   // refer to current user
      title: data.requestBody.title,
      description: data.requestBody.description || "",
    }

    ItemsService.staticItems.push(newItem)

    return new Promise((resolve) => {
      setTimeout(() => {
        resolve(newItem)
      }, 500)
    }) as CancelablePromise<ItemsCreateItemResponse>
  }

  /**
   * Read Item
   * Get item by ID.
   * @param data The data for the request.
   * @param data.id
   * @returns ItemPublic Successful Response
   * @throws ApiError
   */
  // TODO - need to update this method
  public static readItem(
    data: ItemsReadItemData,
  ): CancelablePromise<ItemsReadItemResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/items/{id}",
      path: {
        id: data.id,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update Item
   * Update an item.
   * @param data The data for the request.
   * @param data.id
   * @param data.requestBody
   * @returns ItemPublic Successful Response
   * @throws ApiError
   */
public static updateItem(
  data: ItemsUpdateItemData
): Promise<ItemsUpdateItemResponse> {
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      // retrieve item id
      const index = ItemsService.staticItems.findIndex(
        (item) => item.id === data.id
      )

      if (index === -1) {
        return reject(new Error("Item not found"))
      }

      const updatedItem = {
        ...ItemsService.staticItems[index],
        title: data.requestBody.title ?? ItemsService.staticItems[index].title,
        description:
          data.requestBody.description ?? ItemsService.staticItems[index].description,
      }

      ItemsService.staticItems[index] = updatedItem

      resolve(updatedItem)
    }, 300) 
  })
}

  /**
   * Delete Item
   * Delete an item.
   * @param data The data for the request.
   * @param data.id
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static deleteItem(
    data: ItemsDeleteItemData
  ): Promise<ItemsDeleteItemResponse> {
    return new Promise((resolve, reject) => {
      setTimeout(() => {
        const index = ItemsService.staticItems.findIndex(
          (item) => item.id === data.id
        )
  
        if (index === -1) {
          return reject(new Error("Item not found"))
        }
  
        ItemsService.staticItems.splice(index, 1)
  
        resolve({ message: "Item deleted successfully" })
      }, 300)
    })
  }
}
